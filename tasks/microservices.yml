---

  - name: Expand system package repository
    become: true
    yum:
      name:
        - epel-release
      state: present

  - name: upgrade all packages
    become: true
    yum:
      name:
        - "*"
      state: latest

  - name: Install nginx
    become: true
    yum:
      name:
        - nginx
      state: present

  - set_fact:
     service_directory: "/home/{{ ansible_user }}/service"

  - name: Check service directory
    stat:
      path: "{{ service_directory }}"
    register: service_directory_exists

  - name: Clone service if not present
    become: false
    git:
      repo: https://github.com/evangraan/nginx-gunicorn-flask-service-python-client-ansible-provisioning-behave-bdd.git
      dest: "{{ service_directory }}"
    when: service_directory_exists.stat.exists == false

  - name: Install microservices environment
    become: false
    pip:
      requirements: "{{ service_directory }}/requirements.txt"
      virtualenv: "{{ service_directory }}/venv"
      virtualenv_python: python3.6.8

  - name: Install microservices libraries
    become: true
    pip:
      name:
        - gunicorn
        - flask
        - flask_httpauth
      state: present
      executable: pip3

  #- name: start service firewald
  #  become: true
  #  systemd:
  #    name: firewalld
  #    state: started

  #- name: Open firewall port 22
  #  become: true
  #  firewalld: port=22/tcp zone=public permanent=true state=enabled immediate=yes

  #- name: Open firewall port 80
  #  become: true
  #  firewalld: port=80/tcp zone=public permanent=true state=enabled immediate=yes

  #- name: Open firewall port 443
  #  become: true
  #  firewalld: port=443/tcp zone=public permanent=true state=enabled immediate=yes

  - name: Create socket for gunicorn
    become: true
    file:
      path: /var/sockets
      state: directory
      owner: "{{ ansible_user }}"
      group: nginx

  - name: Add the service to systemd
    become: true
    copy:
      src: "{{ service_directory }}/service.service"
      remote_src: yes
      dest: /etc/systemd/system/service.service

  - name: Configure the service with the correct username
    become: true
    replace:
      path: /etc/systemd/system/service.service
      regexp: "USER"
      replace: "{{ ansible_user }}"

  - name: Proxy using nginx
    become: true
    copy:
      src: "{{ service_directory }}/service.conf"
      remote_src: yes
      dest: /etc/nginx/conf.d/service.conf

  - name: Configure the proxy with the server IP address
    become: true
    replace:
      path: /etc/nginx/conf.d/service.conf
      regexp: "SERVERIP"
      replace: "{{ ansible_default_ipv4.address }}"

  - name: Make SELinux policy management script executable
    file:
      path: "{{ service_directory }}/se_policy.sh"
      state: touch
      mode: u+x

  - name: Set SELinux policy to allow API traffic
    become: true
    shell: "{{ service_directory }}/se_policy.sh"

  - name: Create SSL key repository
    become: true
    file:
      path: /etc/ssl/private/
      state: directory
      owner: root
      group: root
      mode: 0700

  - name: Add SSL certificate
    become: true
    copy:
      src: "{{ service_directory }}/nginx-selfsigned.crt"
      remote_src: yes
      dest: /etc/ssl/certs/nginx-selfsigned.crt

  - name: Add SSL key
    become: true
    copy:
      src: "{{ service_directory }}/nginx-selfsigned.key"
      remote_src: yes
      dest: /etc/ssl/private/nginx-selfsigned.key

  - name: Add Diffie Hellman group
    become: true
    copy:
      src: "{{ service_directory }}/dhparam.pem"
      remote_src: yes
      dest: /etc/ssl/certs/dhparam.pem

  - name: Enable HTTP redirect
    become: true
    copy:
      src: "{{ service_directory }}/ssl-redirect.conf"
      remote_src: yes
      dest: /etc/nginx/default.d/ssl-redirect.conf

  - name: Make service management script executable
    file:
      path: "{{ service_directory }}/start_services.sh"
      state: touch
      mode: u+x

  - name: Ensure service and nginx are running and starts on boot
    become: true
    shell: "{{ service_directory }}/start_services.sh&"

  - name: Check once a day and clean out records older than 1 week
    become: true
    copy:
      src: "{{ service_directory }}/records.cron"
      remote_src: yes
      dest: /etc/cron.daily/records.cron

  - name: Configure the cron entry with the correct username
    become: true
    replace:
      path: /etc/cron.daily/records.cron
      regexp: "USER"
      replace: "{{ ansible_user }}"

  - name: Make the cron entry executable
    become: true
    file:
      path: /etc/cron.daily/records.cron
      state: touch
      mode: ug+x